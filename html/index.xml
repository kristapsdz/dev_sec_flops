<!DOCTYPE html>
<html lang="en">
	<head>
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<meta charset="utf-8" /> 
		<title>Source code sandboxing</title>
		<script defer="defer" src="https://cdn.jsdelivr.net/npm/chart.js@4.4.4/dist/chart.umd.min.js"></script>
		<script defer="defer" src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@3.0.0/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
		<script defer="defer" src="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.10.0/build/highlight.min.js"></script>
		<script defer="defer" src="index.js"></script>
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin="crossorigin" />
		<link rel="stylesheet"
	         href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&amp;display=swap" />
		<link rel="stylesheet"
		 href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" />
		<link rel="stylesheet" href="index.css" />
		<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.10.0/styles/default.min.css" />
	</head>
	<body>
		<header>
			<div class="github">
				<a href="https://github.com/kristapsdz/dev_sec_flops">
					<i class="fa fa-github"></i>
					DevSecFlops</a>:
			</div>
			<h1>
				Source code sandboxing
			</h1>
			<nav>
				<a href="#intro">#intro</a>
				<a href="#examples">#examples</a>
				<a href="#casestudy">#casestudy</a>
				<a href="#findings">#findings</a>
				<a href="#betterment">#betterment</a>
			</nav>
		</header>
		<section id="intro">
			<p class="byline">
				In 2024, how easy is it for a developer to <q>sandbox</q> a program
				by its source code?
			</p>
			<p>
				Assume that the program wants only to manipulate open file
				descriptors (e.g., standard IO) and manage its own
				memory&#8212;regular console stuff.  If the running program tries to
				do anything else, it must be terminated or otherwise unable to
				acquire the requested resources (opening files, network sockets,
				shared memory, etc.).
			</p>
			<p>
				In this article, I examine different open source sandboxes used to
				enact these sandboxes, such as
				<a href="https://openbsd.org">OpenBSD</a>'s
				<a href="https://man.openbsd.org/pledge">pledge</a> and
				<a href="https://linux.org">Linux</a>'s
				<a href="https://docs.kernel.org/userspace-api/seccomp_filter.html">seccomp</a>,
				by example.
				Jump to the <a href="#examples">examples</a> for a full list.
			</p>
			<figure id="chart-box">
				<figcaption>
					<div>
						<p>
							How complex is it to sandbox your source
							code?
						</p>
						<p>
							This graphs the
							<strong>text length of all references</strong>
							that must be read to understand the system
							(manual pages, etc.) to the
							<strong>number of lines in an example</strong>.
						</p>
					</div>
				</figcaption>
				<div>
					<canvas id="chart-scatter"></canvas>
				</div>
			</figure>
			<p>
				Systems easy to understand (<q>references</q>) and implement
				(<q>source code</q>) are grouped in the lower-left, while
				progressively more complicated systems are in the upper-right.
			</p>
		</section>
		<section id="examples">
			<p>
				Below is a list of all examples.  Click the folder icon on an
				example to see its source code, references, and notes.  Which method
				would you choose?  Sources readable on a normal mobile phone (&lt;20
				lines) have lines show in blue, barely readable (20&#8211;30 lines)
				in orange, and above in red.  Deprecated sandboxes are marked next
				to the subsytem name.
			</p>
			<div class="table">
				<div class="table-head">
					<div class="table-row" id="examples-columns-box">
					</div>
				</div>
				<div id="examples-box" class="table-body">
				</div>
			</div>
			<p>
				We can further clarify this data by grouping by operating systems
				and sandboxes&#8212;environment.  How hard it is to implement a
				sandbox in your environment of choice?
			</p>
			<div id="chart-multi-box">
				<figure>
					<canvas id="chart-systems"></canvas>
					<canvas id="chart-subsystems"></canvas>
				</figure>
				<figcaption>
					<div>
						<p>
							Moving from right to left in these
							graphs&#8212;reducing complexity&#8212;puts
							to practice Jerry Saltzer's reflections
							on Multics, which featured a predecessor to
							call-based capabilities systems like
							modern-day
							<a href="https://docs.kernel.org/userspace-api/seccomp_filter.html">
								seccomp</a> (emphasis mine):
						</p>
						<p>
							<q>The user&#8230; must figure out for
								himself how to accomplish his
								intentions amid a myriad of
								possibilities, not all of which he
								understands&#8230;
								<strong> The solution to this
									problem lies in better
									understanding the nature of
									the typical user's mental
									description of protection
									intent, and then devising
									interfaces which permit more
									direct specification of that
									protection intent.</strong></q>
							[<a href="https://dl.acm.org/doi/pdf/10.1145/361011.361067">ref</a>]
						</p>
					</div>
				</figcaption>
			</div>
		</section>
		<section id="casestudy">
			<p>
				These are all trivial examples, and only demonstrate as much as
				<q>Hello, world</q> programs demonstrate a programming language.
				Let's refocus on a real world example taken both as a snapshot and
				as developed over time.
			</p>
			<p class="byline">
				Real-world sandboxing in 2024.
			</p>
			<p>
				Let's use
				<a href="https://github.com/openssh/openssh-portable">openssh-portable</a>
				as a canonical example.  OpenSSH is under tremendous pressure for
				its security.  It has a number of source code sandboxes, including
				most of those mentioned in this survey.  In general, these sandboxes
				will do little more than our examples&#8212;limit resources used to
				only communication over standard IO and to perform in-process duties
				(memory management, etc.).  How do the lengths of source code (in
				lines) for each sandbox measure, with the collected references
				length for comparison?
			</p>
			<figure id="chart-casestudy-box">
				<div>
					<canvas id="chart-casestudy"></canvas>
				</div>
				<figcaption>
					<div>
						<div>
							Sources...
						</div>
						<div id="casestudy-links">
						</div>
					</div>
				</figcaption>
			</figure>
			<p>
				This only shows an instantaneous view of the system: part of the
				security of a system is its maintenance over time.  How difficult is
				it to maintain the security implementations over time?
				In the following chart, I continue looking at 
				<a href="https://github.com/openssh/openssh-portable">openssh-portable</a>,
				but extracting its commit history (via GitHub) over time for the
				specific files used for sandboxing.
			</p>
			<figure id="chart-casestudy-history-box">
				<figcaption>
					<div>
						<p>
							This plots cumulative commit counts in the
							<a href="https://github.com/openssh/openssh-portable">GitHub repository</a>
							over time.  Size of commits is not
							regarded&#8212;only the frequency.
							Subsystems that require significant
							maintenance will grow much more quickly than
							those with lighter maintenance burdens.
						</p>
					</div>
				</figcaption>
				<div>
					<canvas id="chart-casestudy-history"></canvas>
				</div>
			</figure>
		</section>
		<section id="findings">
			<p class="byline">
				Findings so far?  It depends on your environment.
			</p>
			<p>
				<a href="https://linux.org">Linux</a> has a whopping seven-fold
				increase in reference complexity, and even more for source
				complexity, over OpenBSD and FreeBSD.
				<a href="https://docs.kernel.org/userspace-api/landlock.html">Landlock</a>
				showed promise as a simpler alternative, but has since grown in
				complexity.
				<a href="https://openbsd.org">OpenBSD</a> and
				<a href="https://freebsd.org">FreeBSD</a> rank roughly
				equivalently, with the former having increased mildly in complexity.
			</p>
			<p>
				The maintenance burden for 
				<a href="https://docs.kernel.org/userspace-api/seccomp_filter.html">seccomp</a>,
				as illustrated by 
				<a href="https://github.com/openssh/openssh-portable">openssh-portable</a>,
				is considerable.  The burden for the other systems is considerably
				less&#8212;almost nothing since original implementation.
			</p>
			<p>
				Ominously, 
				<a href="https://www.apple.com/macos">Mac OS X</a>
				has deprecated its source sandbox, as has
				<a href="https://www.java.com/">Java</a> by discontinuing the 
				<a href="https://docs.oracle.com/javase/tutorial/essential/environment/security.html">JSM</a>.
			</p>
			<p>
				How are these findings reflected in a survey of real-world sandboxed
				systems?  In the charts below, I collect all contributions to
				sandbox environments per-system and per-sandbox.  So one contributor
				adding 
				<a href="https://man.openbsd.org/pledge">pledge</a>
				to an open source system would add weight to the <q>pledge</q> box
				and <q>OpenBSD</q>.
			</p>
			<div id="chart-contrib-box">
				<figure>
					<div>
						<canvas id="chart-subsystems-contribs"></canvas>
					</div>
					<div>
						<canvas id="chart-systems-contribs"></canvas>
					</div>
				</figure>
			</div>
		</section>
		<section id="betterment">
			<p class="byline">
				How can we make this better in 2025?
			</p>
			<p>
				I'm starting this site to gain a full picture of the <q>sandbox</q>
				landscape in open systems.  Having a list of possible combinations
				of languages, operating systems, and sandbox tools is a good start.
				And for that, if you have additions, please visit the
				<a href="https://github.com/kristapsdz/dev_sec_flops">DevSecFlops</a>
				GitHub page to add more examples.
			</p>
			<p>
				More importantly, I want to know
				<strong>who is using these security systems, and where</strong>.
				Let's put together some numbers for how many systems in the wild
				really are protected, and start a conversation about why systems are
				more popular, and what we can do to raise the state of security on
				less-popular systems.
				To wit, I've added <q>attestations</q> to each example in the
				<a href="https://github.com/kristapsdz/dev_sec_flops">DevSecFlops</a>
				repository.  Just open a pull request with your GitHub name (for
				now, just GitHub&#8212;I'll add more later) and add the repository
				to which you've contributed security sandboxing.
			</p>
			<p>
				Full instructions on how to add examples, sandbox, and
				attestations are all on the GitHub page, and all possible through
				pull requests.  I'll merge this into these on an as-needed basis.
			</p>
		</section>
		<footer>
			Copyright &#x00a9; Kristaps Dzonsons
		</footer>
		<input type="checkbox" name="code-shown" hidden="hidden" id="code-shown" />
		<label for="code-shown" id="code-mask"></label>
		<div role="dialog" id="code">
			<input type="radio" class="code-views" name="view" id="view-code" checked="checked" />
			<input type="radio" class="code-views" name="view" id="view-notes" />
			<input type="radio" class="code-views" name="view" id="view-references" />
			<header>
				<div>
					<div>
						Example &#8211;
						<span id="code-system"></span>
						<span id="code-subsystem"></span>
						<span id="code-lang"></span>
					</div>
					<a id="code-github">
						<i class="fa fa-github"></i>
					</a>
					<label for="code-shown">
						<i class="fa fa-close"></i>
					</label>
				</div>
				<nav>
					<label id="code-box-label" for="view-code">Code</label>
					<label id="code-references-label" for="view-references">References</label>
					<label id="code-notes-label" for="view-notes">Notes</label>
				</nav>
			</header>
			<div id="code-box"></div>
			<div id="code-notes"></div>
			<div id="code-references"></div>
		</div>
	</body>
</html>
